spring.rabbitmq.username=johnawll
spring.rabbitmq.password=123456
#//消息处理过程中如果发生数异常是否重新入队，true表示重新入队，实际应用里面，关闭的更多
spring.rabbitmq.listener.simple.default-requeue-rejected=false
#spring.rabbitmq.addresses=
server.port=9901


spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.virtual-host=johnawll
spring.rabbitmq.publisher-confirm-type=correlated
#是否启用发布确认
spring.rabbitmq.publisher-returns=true
spring.rabbitmq.listener.simple.idle-event-interval=5000
#消息限流，当消费者处理能力有限，这个参数保证最多有多少条参数还没有确认的时候，不会在拉取。这个参数要在确认模式改为手动模式才有意义
spring.rabbitmq.listener.simple.prefetch=5
spring.rabbitmq.listener.simple.batch-size=5
#设置同一个消费者并发消费，那种对消息的顺序有苛刻要求的场景不适合并发消费
spring.rabbitmq.listener.simple.concurrency=1
#如果 acknowledgeMode 设置成None，就是设置了amqp协议里面的消费自动确认，amqp代理发送了消息之后就从队列删除消息
spring.rabbitmq.listener.simple.acknowledgeMode=manual
#spring.rabbitmq.addresses=

#在消息没有被路由到合适队列情况下会将消息返还给消息发布者
#当mandatory标志位设置为true时，如果exchange根据自身类型和消息routingKey无法找到一个合适的queue存储消息，
# 那么broker会调用basic.return方法将消息返还给生产者;当mandatory设置为false时，
# 出现上述情况broker会直接将消息丢弃;通俗的讲，mandatory标志告诉broker代理服务器至少将消息route到一个队列中，
# 否则就将消息return给发送者;
spring.rabbitmq.template.mandatory=true
